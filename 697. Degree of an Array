class Solution {
    public int findShortestSubArray(int[] nums) {
        if(nums.length==0)
            return 0;
     Map<Integer,Integer>map=new HashMap<Integer,Integer>();
       int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i]))
            {
                map.put(nums[i],map.get(nums[i])+1);
                max=Math.max(max,map.get(nums[i]));
            }
                else
            map.put(nums[i],1);
        }
        List<Integer>temp=new ArrayList<Integer>();
        for(int i=0;i<nums.length;i++)
        {
           if(map.get(nums[i])!=null && map.get(nums[i])==max)
           {
               temp.add(nums[i]);
               map.remove(nums[i]);
           }
        }
        int output=Integer.MAX_VALUE;
        int first=-1,second=-1;
        for(int j=0;j<temp.size();j++)
        {
          for(int i=0;i<nums.length;i++){
              if(first==-1 && nums[i]==temp.get(j)){
                  first=i;
              }  else if(nums[i]==temp.get(j)){
                  second=i;
              }                                      
          }
             
             output=Math.min(second-first+1,output);                                        
                     second=-1;
                                                     first=-1;
        } 
        if(output==2147483647)
            return 1;
        return output;
    }
}
