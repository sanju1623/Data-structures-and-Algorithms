Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

Example:
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3
Input: word1 = "makes", word2 = "coding"
Output: 1
Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

------------------------------------------------------
//approach store all the indexes in the list and compare them to find minimum
//not optimal solution- O(n2)

class Solution {
    public int shortestDistance(String[] words, String word1, String word2) {
        int i=0;
        List<Integer>first=new ArrayList();
        List<Integer>second=new ArrayList();
        for(i=0;i<words.length;i++){
            if(words[i].equals(word1)){
                first.add(i);
            }
            if(words[i].equals(word2)){
                second.add(i);
            }
        }
        int output=Integer.MAX_VALUE;
        for(i=0;i<first.size();i++){
            for(int j=0;j<second.size();j++){
                output=Math.min(output,Math.abs(first.get(i)-second.get(j)));
            }
        } 
        return output;
    }
}
-------------------------------------------------------------------------------

Optimal solution referred logic from discussions

approach :-find the minimum between store the indexes whenever you find the words.

class Solution {
    public int shortestDistance(String[] words, String word1, String word2) {
        int i=0;
        int first=-1;
        int second=-1;
        int output=Integer.MAX_VALUE;
     
        for(i=0;i<words.length;i++){
            if(words[i].equals(word1)){
                first=i;
            }
            if(words[i].equals(word2)){
                second=i;
            }
            
           if(first!=-1 && second!=-1)
                output=Math.min(output,Math.abs(first-second));
            
        }       
        return output;
    }
}



