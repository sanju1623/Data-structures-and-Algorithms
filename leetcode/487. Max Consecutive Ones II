class Solution {


//approach store all zero indexes and compare the diff
//not optimal solution

    public int findMaxConsecutiveOnes(int[] nums) {
     List<Integer>temp=new ArrayList<Integer>();
       int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0)
            temp.add(i);
        }
        
        if(temp.size()<=1)
        return nums.length;
        for(int i=0;i+1<=temp.size();i++){
            if(i==0){
                max=Math.max(max,temp.get(i+1));
            }
            else if(i!=temp.size()-1){
                max=Math.max(max,temp.get(i+1)-temp.get(i-1)-1);   
            }
            else
            {
               // System.out.println("temp");
                max=Math.max(max,nums.length-temp.get(i-1)-1);       
            }
        }
        
        return max;
    }
}


----------------------------------------------------------------------
//optimal O(n)
class Solution {
    
    // approach keep the track of prev and that before one and subtract
    // try to solve on paper mathematically will be easy.
    //referred from discussions
    
    
    public int findMaxConsecutiveOnes(int[] nums) {
    int prev=-1,cur=-1,max=0,i=0;
        for(i=0;i<nums.length;i++){
            if(nums[i]==0){
            max=Math.max(max,i-prev-1);
                prev=cur;
                cur=i;
            }
            
        }
        
            return Math.max(max,i-prev-1);
    }
}
