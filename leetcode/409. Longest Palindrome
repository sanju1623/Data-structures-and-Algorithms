// Not optimal 


class Solution {
    public int longestPalindrome(String s) {
     
        Map<Character,Integer>map=new HashMap<Character,Integer>();
        for(int i=0;i<s.length();i++){
            if(map.containsKey(s.charAt(i))){
                map.put(s.charAt(i),map.get(s.charAt(i))+1);
            }
            else
                map.put(s.charAt(i),1);
        }
        int hasone=0,count=0,has=0;
         Iterator it = map.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pair = (Map.Entry)it.next();
       //System.out.println(pair.getKey() + " = " + pair.getValue());
        if((Integer)pair.getValue()>1){
            if((Integer)pair.getValue()%2==1 )
            {
                count=count+(Integer)pair.getValue()-1;
            }
                else
            count=count+(Integer)pair.getValue();       
        }
    }
       if(count<s.length())
            return count+1;
        else
            return count;
    }
}
