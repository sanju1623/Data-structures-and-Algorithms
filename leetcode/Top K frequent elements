class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer>out=new ArrayList();
          Map<Integer,Integer>m=new HashMap<>();
       int p=1;
        for(int i=0;i<nums.length;i++)
       {
            if(m.get(nums[i])!=null)
           m.put(nums[i],m.get(nums[i])+1);
            else
            m.put(nums[i],p);   
       }
        List<Map.Entry<Integer, Integer>> list =
                new LinkedList<Map.Entry<Integer, Integer>>(m.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
            public int compare(Map.Entry<Integer, Integer> o1,
                               Map.Entry<Integer, Integer> o2) {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });
        Map<Integer, Integer> m1 = new LinkedHashMap<Integer, Integer>();
        for (Map.Entry<Integer, Integer> entry : list) {
            m1.put(entry.getKey(), entry.getValue());
        }
      Set set = m1.entrySet();
      // Get an iterator
      Iterator i1 = set.iterator();
        int temp=0;
        while(i1.hasNext()) {
         Map.Entry me = (Map.Entry)i1.next();
        if(temp>=Math.abs(set.size()-k))
      out.add((Integer)me.getKey());
            temp++;
        }
        
       Collections.reverse(out);
        return out;
    }
}
